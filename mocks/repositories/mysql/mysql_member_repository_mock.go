// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories/mysql/mysql_member_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "book-management-system/entities/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMemberRepository is a mock of MemberRepository interface
type MockMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepositoryMockRecorder
}

// MockMemberRepositoryMockRecorder is the mock recorder for MockMemberRepository
type MockMemberRepositoryMockRecorder struct {
	mock *MockMemberRepository
}

// NewMockMemberRepository creates a new mock instance
func NewMockMemberRepository(ctrl *gomock.Controller) *MockMemberRepository {
	mock := &MockMemberRepository{ctrl: ctrl}
	mock.recorder = &MockMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemberRepository) EXPECT() *MockMemberRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockMemberRepository) GetAll(arg0 context.Context) (models.Members, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(models.Members)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockMemberRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMemberRepository)(nil).GetAll), arg0)
}

// CreateMember mocks base method
func (m *MockMemberRepository) CreateMember(arg0 context.Context, arg1 *models.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMember indicates an expected call of CreateMember
func (mr *MockMemberRepositoryMockRecorder) CreateMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockMemberRepository)(nil).CreateMember), arg0, arg1)
}

// UpdateMember mocks base method
func (m *MockMemberRepository) UpdateMember(arg0 context.Context, arg1 *models.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMember indicates an expected call of UpdateMember
func (mr *MockMemberRepositoryMockRecorder) UpdateMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockMemberRepository)(nil).UpdateMember), arg0, arg1)
}
