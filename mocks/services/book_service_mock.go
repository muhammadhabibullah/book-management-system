// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecases/services/book_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "book-management-system/entities/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBookService is a mock of BookService interface
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// GetBooks mocks base method
func (m *MockBookService) GetBooks(arg0 context.Context) (models.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", arg0)
	ret0, _ := ret[0].(models.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks
func (mr *MockBookServiceMockRecorder) GetBooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBookService)(nil).GetBooks), arg0)
}

// CreateBook mocks base method
func (m *MockBookService) CreateBook(arg0 context.Context, arg1 *models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook
func (mr *MockBookServiceMockRecorder) CreateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookService)(nil).CreateBook), arg0, arg1)
}

// UpdateBook mocks base method
func (m *MockBookService) UpdateBook(arg0 context.Context, arg1 *models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockBookServiceMockRecorder) UpdateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookService)(nil).UpdateBook), arg0, arg1)
}

// SearchBooks mocks base method
func (m *MockBookService) SearchBooks(arg0 context.Context, arg1 string) (models.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBooks", arg0, arg1)
	ret0, _ := ret[0].(models.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBooks indicates an expected call of SearchBooks
func (mr *MockBookServiceMockRecorder) SearchBooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBooks", reflect.TypeOf((*MockBookService)(nil).SearchBooks), arg0, arg1)
}
