// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories/elasticsearch/es_book_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "book-management-system/entities/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBookRepository is a mock of BookRepository interface
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// IndexBook mocks base method
func (m *MockBookRepository) IndexBook(arg0 context.Context, arg1 *models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexBook indicates an expected call of IndexBook
func (mr *MockBookRepositoryMockRecorder) IndexBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexBook", reflect.TypeOf((*MockBookRepository)(nil).IndexBook), arg0, arg1)
}

// SearchBook mocks base method
func (m *MockBookRepository) SearchBook(arg0 context.Context, arg1 string) (models.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBook", arg0, arg1)
	ret0, _ := ret[0].(models.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBook indicates an expected call of SearchBook
func (mr *MockBookRepositoryMockRecorder) SearchBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBook", reflect.TypeOf((*MockBookRepository)(nil).SearchBook), arg0, arg1)
}
